# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  products: [Product!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Company {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  website: String!
  phone: String!
  email: String!
  products: [Product!]!
  userId: Int
  employees: [User!]
}

type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  path: String!
  productId: String!
  product: Product!
}

type Details {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  color: String!
  quantity: Int!
  size: Size
  productId: String!
  product: Product!
  cartItem: CartItem!
}

"""Detailed Product Size in the system"""
enum Size {
  SMALL
  XSMALL
  MEDIUM
  LARGE
  XLARGE
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  price: Float!
  categoryId: String!
  companyId: String!
  userId: String!
  category: Category!
  company: Company
  user: User!
  images: [Image!]!
  details: [Details!]!
  cartItem: CartItem!
}

type CartItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  productId: String!
  detailsId: String!
  quantity: Int!
  totalPrice: Float!
  product: Product!
  details: Details!
  cart: Cart!
}

type Cart {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalPrice: Float!
  userId: String!
  cartItems: [CartItem!]
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  fullName: String!
  avatar: String
  phone: String!
  email: String!
  companyId: String
  company: Company
  products: [Product!]
  cart: [Cart!]
}

type AuthOutPut {
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type CompanyResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Company
}

type CompanysResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Company!]
  pagination: PaginationInfo
}

type CategoryResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Category
}

type CategoriesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Category!]
  pagination: PaginationInfo
}

type ProductResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Product
}

type ProductsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Product!]
  pagination: PaginationInfo
}

type ProductPubsupResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Product
}

type ProductDetailResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Details
}

type ProductDetailsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Details!]
  pagination: PaginationInfo
}

type CartResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Cart
}

type CartItemResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CartItem
}

type CartItemsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CartItem!]
  pagination: PaginationInfo
}

type TotalCartsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Float
}

type Query {
  sayHello: String!
  getUserById(id: String!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  deleteUser: UserResponse!
  getCompanyById(id: String!): CompanyResponse
  getCompanyByName(name: String!): CompanyResponse
  getAllCompanys(page: Int, limit: Int): CompanysResponse
  getAllCategories(page: Float, limit: Float): CategoriesResponse!
  getCategoryById(id: String!): CategoryResponse!
  getCategoryByName(name: String!): CategoryResponse!
  getAllProducts(findProductInput: FindProductInput, page: Int, limit: Int): ProductsResponse!
  getProductById(id: String!): ProductResponse!
  getAllProductDetails(findProductDetailsInput: FindProductDetailsInput, page: Int, limit: Int): ProductDetailsResponse!
  getProductDetailById(id: String!): ProductDetailResponse!
  findCartItems(cartId: String!): CartItemsResponse!
  checkTotalCart: TotalCartsResponse!
}

input FindProductInput {
  name: String
  description: String
  priceMin: Float
  priceMax: Float
  categoryId: String
  companyId: String
}

input FindProductDetailsInput {
  color: String
  quantity: Int
  size: Size
  productId: String
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!, avatar: CreateImagDto): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): UserResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): UserResponse!
  logout: Boolean!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  UpdateUserRole(email: String!): String!
  createCompany(createCompanyDto: CreateCompanyDto!, userId: String!): CompanyResponse!
  addEmployee(companyId: String!, userId: String!): CompanyResponse!
  deleteEmployee(companyId: String!, userId: String!): CompanyResponse!
  updateCompany(id: String!, updateCompanyDto: UpdateCompanyDto!): CompanyResponse!
  deleteCompany(id: String!): CompanyResponse!
  createCategory(name: String!): CategoryResponse!
  updateCategory(id: String!, name: String!): CategoryResponse!
  deleteCategory(id: String!): CategoryResponse!
  createProduct(createProductInput: CreateProductInput!): ProductResponse!
  updateProduct(updateProductInput: UpdateProductInput!): ProductResponse!
  deleteProduct(id: String!): ProductResponse!
  createProductDetail(createDetailInput: CreateDetailInput!): ProductDetailResponse!
  updateProductDetail(updateProductDetailsInput: UpdateProductDetailsInput!): ProductDetailResponse!
  deleteProductDetail(id: String!): ProductDetailResponse!
  addToCart(cartItemInput: CartItemInput!): CartResponse!
  updateCartItemQuantity(cartItemId: String!, quantity: Float!): CartItemResponse!
  deleteCartItems: CartResponse!
  deleteCart(cartId: String!): CartResponse!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateCompanyDto {
  name: String!
  email: String!
  phone: String!
  website: String!
}

input UpdateCompanyDto {
  name: String
  email: String
  phone: String
  website: String
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  categoryId: String!
  details: [CreateDetailInput!]!
  images: [CreateImagDto!]!
}

input CreateDetailInput {
  color: String!
  quantity: Int!
  size: Size
  productId: String!
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  categoryId: String
  details: [CreateDetailInput!]
  images: [CreateImagDto!]
  id: String!
}

input UpdateProductDetailsInput {
  color: String
  quantity: Int
  size: Size
  productId: String
  id: String!
}

input CartItemInput {
  productId: String!
  detailsId: String!
  quantity: Float!
}

type Subscription {
  productCreated: ProductPubsupResponse!
  productDeleted: String!
}