# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coupon {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  categoryId: String!
  name: String!
  discount: Float!
  type: TypeCoupon!
  isActive: Boolean!
  expiryDate: DateTime!
  categories: Category!
  orders: [Order!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Types of Coupons in the system"""
enum TypeCoupon {
  FIXED
  PERCENTAGE
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  products: [Product!]
  coupon: Coupon!
}

type UserAddress {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  addressId: String!
  isDefault: Boolean!
  user: User!
  address: Address!
  orders: [Order!]
}

type Country {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cities: [City!]!
}

type City {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  state: String!
  countryId: String!
  postalCode: String
  country: Country!
  addresses: [Address!]
}

type Address {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  locationId: String!
  street: String!
  addressType: AddressType!
  city: City!
  userAddresses: [UserAddress!]
  company: Company
}

"""Detailed Address Type in the system"""
enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}

type Company {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: Int!
  name: String!
  website: String!
  phone: String!
  email: String!
  addressId: String
  address: Address
  products: [Product!]!
  employees: [User!]
}

type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  path: String!
  productId: String!
  product: Product!
}

type Cart {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalPrice: Float!
  userId: String!
  cartItems: [CartItem!]
}

type CartItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  productId: String!
  detailsId: String!
  quantity: Int!
  totalPrice: Int!
  cartId: String!
  product: Product!
  details: Details!
  cart: Cart!
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  price: Float!
  categoryId: String!
  companyId: String!
  userId: String!
  category: Category!
  company: Company
  user: User!
  images: [Image!]!
  details: [Details!]!
  cartItem: CartItem!
}

type Color {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  details: [Details!]!
}

type Details {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  colorId: String!
  quantity: Int!
  size: Size
  productId: String!
  product: Product!
  cartItem: CartItem!
  orderItems: [OrderItem!]!
  color: Color!
}

"""Detailed Product Size in the system"""
enum Size {
  SMALL
  XSMALL
  MEDIUM
  LARGE
  XLARGE
}

type OrderItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderId: String!
  detailsId: String!
  quantity: Int!
  price: Float!
  order: Order!
  productDetails: Details!
}

type Order {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  totalPrice: Float!
  totalPriceAfterDiscount: Float!
  addressId: String!
  couponId: String
  orderStatus: OrderStatus!
  paymentMethod: PaymentMethod!
  paymentStatus: PaymentStatus!
  user: User!
  address: UserAddress!
  coupon: Coupon
  orderItems: [OrderItem!]
}

"""Detailed Order Status in the system"""
enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELED
}

"""Detailed Payment Method in the system"""
enum PaymentMethod {
  STRIPE
  CASH_ON_DELIVERY
}

"""Detailed Payment Status in the system"""
enum PaymentStatus {
  UNPAID
  PAID
  FAILD
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  fullName: String!
  avatar: String
  phone: String!
  email: String!
  companyId: String
  company: Company
  products: [Product!]
  userAddresses: [UserAddress!]
  cart: Cart
  orders: [Order!]
}

type AuthOutPut {
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type AddressResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Address
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type UserAddressResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: UserAddress
}

type CompanyResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Company
}

type CompanysResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Company!]
  pagination: PaginationInfo
}

type CategoryResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Category
}

type CategoriesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Category!]
  pagination: PaginationInfo
}

type ProductResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Product
}

type ProductsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Product!]
  pagination: PaginationInfo
}

type ProductPubsupResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Product
}

type ProductDetailResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Details
}

type ProductDetailsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Details!]
  pagination: PaginationInfo
}

type CartResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Cart
}

type CartItemResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CartItem
}

type CartItemsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CartItem!]
  pagination: PaginationInfo
}

type TotalCartsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Float
}

type CouponResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Coupon
}

type CouponsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Coupon!]
  pagination: PaginationInfo
}

type CountryResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Country
}

type CountrysResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Country!]
  pagination: PaginationInfo
}

type CityResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: City
}

type CitysResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [City!]
  pagination: PaginationInfo
}

type OrderResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Order
}

type OrdersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Order!]
  pagination: PaginationInfo
}

type CreateOrder {
  url: String
}

type CreateOrderResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CreateOrder
}

type TrackOrderStatus {
  status: OrderStatus!
  updatedAt: DateTime!
}

type TrackOrderStatusResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: TrackOrderStatus
}

type OrderItemsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [OrderItem!]
  pagination: PaginationInfo
}

type OrderStatistics {
  totalOrders: Int!
  completedOrders: Int!
  canceledOrders: Int!
  totalRevenue: Int!
}

type OrderStatisticsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: OrderStatistics
}

type ColorResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Color
}

type ColorsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Color!]
  pagination: PaginationInfo
}

type Query {
  sayHello: String!
  getAllOrders(page: Int, limit: Int): OrdersResponse!
  getMyOrders(page: Int, limit: Int): OrdersResponse!
  getOrderById(id: String!): OrderResponse!
  searchOrders(userId: String, status: String, startDate: DateTime, endDate: DateTime, page: Float, limit: Float): OrdersResponse!
  getOrderItems(orderId: String!): OrderItemsResponse!
  trackOrderStatus(id: String!): TrackOrderStatusResponse!
  orderStatistics: OrderStatisticsResponse!
  getUserById(id: String!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  deleteUser: UserResponse!
  getAddress(addressId: String!): AddressResponse!
  findAllCities(page: Float = 1, limit: Float = 10): CitysResponse!
  findCityById(id: String!): CityResponse!
  findCitiesByCountryId(countryId: String!): CitysResponse!
  findAllCountries(page: Float = 1, limit: Float = 10): CountrysResponse!
  findCountryById(id: String!): CountryResponse!
  getCompanyById(id: String!): CompanyResponse
  getCompanyByName(name: String!): CompanyResponse
  getAllCompanys(page: Int, limit: Int): CompanysResponse
  getAllCategories(page: Float, limit: Float): CategoriesResponse!
  getCategoryById(id: String!): CategoryResponse!
  getCategoryByName(name: String!): CategoryResponse!
  getAllProducts(findProductInput: FindProductInput, page: Int, limit: Int): ProductsResponse!
  getProductById(id: String!): ProductResponse!
  getAllColors(page: Int, limit: Int): ColorsResponse!
  getColorById(id: String!): ColorResponse!
  getColorByName(name: String!): ColorResponse!
  getAllProductDetails(findProductDetailsInput: FindProductDetailsInput, page: Int, limit: Int): ProductDetailsResponse!
  getProductDetailById(id: String!): ProductDetailResponse!
  findCartItems(cartId: String!): CartItemsResponse!
  checkTotalCart: TotalCartsResponse!
  findCouponByName(name: String!): CouponResponse!
  findCouponById(id: String!): CouponResponse!
  findAllCoupons(findCouponInput: FindCouponInput, page: Int, limit: Int): CouponsResponse!
}

input FindProductInput {
  name: String
  description: String
  priceMin: Float
  priceMax: Float
  categoryId: String
  companyId: String
}

input FindProductDetailsInput {
  colorId: String
  quantity: Int
  size: Size
  productId: String
}

input FindCouponInput {
  expiryDate: DateTime
  name: String
  categoryId: String
  type: TypeCoupon
  discount: Float
  isActive: Boolean
}

type Mutation {
  createOrderFromCart(addressId: String!, paymentMethod: PaymentMethod!, deliveryPrice: Int, couponId: String): CreateOrderResponse!
  createOrderFromProducts(addressId: String!, paymentMethod: PaymentMethod!, detailsId: String!, quantity: Int!, deliveryPrice: Int, couponId: String): CreateOrderResponse!
  updateOrderStatus(id: String!, status: OrderStatus!): OrderResponse!
  updatePaymentStatus(id: String!, status: PaymentStatus!): OrderResponse!
  cancelOrder(id: String!): OrderResponse!
  deleteOrder(id: String!): OrderResponse!
  deleteCompletedOrder: OrderResponse!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  UpdateUserRole(email: String!): String!
  createAddress(createAddressInput: CreateAddressInput!): AddressResponse!
  updateAddress(addressId: String!, updateAddressInput: UpdateAddressInput!): AddressResponse!
  deleteAddress(addressId: String!): AddressResponse!
  register(fcmToken: String!, createUserDto: CreateUserDto!, avatar: CreateImagDto): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): UserResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): UserResponse!
  logout: Boolean!
  createUserAddress(createUserAddressInput: CreateUserAddressInput!): UserAddressResponse!
  updateUserAddress(addressId: String!, updateAddressInput: UpdateAddressInput, updateUserAddressInput: UpdateUserAddressInput): UserAddressResponse!
  deleteUserAddress(userAddressId: String!): UserAddressResponse!
  setDefaultAddress(userAddressId: String!): UserAddressResponse!
  createCity(createCityInput: CreateCityInput!): CityResponse!
  updateCity(id: String!, name: String!): CityResponse!
  deleteCity(id: String!): CityResponse!
  createCountry(createCountryInput: CreateCountryInput!): CountryResponse!
  updateCountry(id: String!, name: String!): CountryResponse!
  deleteCountry(id: String!): CountryResponse!
  createCompany(userId: String!, createCompanyDto: CreateCompanyDto!, createAddressInput: CreateAddressInput): CompanyResponse!
  addEmployee(companyId: String!, userId: String!): CompanyResponse!
  deleteEmployee(companyId: String!, userId: String!): CompanyResponse!
  updateCompany(id: String!, updateCompanyDto: UpdateCompanyDto!): CompanyResponse!
  deleteCompany(id: String!): CompanyResponse!
  editUserRole(userId: String!, companyId: String!): UserResponse!
  createCategory(name: String!): CategoryResponse!
  updateCategory(id: String!, name: String!): CategoryResponse!
  deleteCategory(id: String!): CategoryResponse!
  createProduct(createProductInput: CreateProductInput!): ProductResponse!
  updateProduct(updateProductInput: UpdateProductInput!): ProductResponse!
  deleteProduct(id: String!): ProductResponse!
  createColor(createColorInput: CreateColorInput!): ColorResponse!
  updateColor(updateColorInput: UpdateColorInput!): ColorResponse!
  deleteColor(id: String!): ColorResponse!
  createProductDetail(createDetailInput: CreateDetailInput!): ProductDetailResponse!
  updateProductDetail(updateProductDetailsInput: UpdateProductDetailsInput!): ProductDetailResponse!
  deleteProductDetail(id: String!): ProductDetailResponse!
  addToCart(cartItemInput: CartItemInput!): CartResponse!
  updateCartItemQuantity(cartItemId: String!, quantity: Float!): CartItemResponse!
  deleteCartItems: CartResponse!
  deleteCart(cartId: String!): CartResponse!
  createCoupon(createCouponInput: CreateCouponInput!): CouponResponse!
  updateCouponActive(id: String!): CouponResponse!
  updateCoupon(updateCouponInput: UpdateCouponInput!): CouponResponse!
  deleteCoupon(id: String!): CouponResponse!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateAddressInput {
  locationId: String!
  street: String!
  addressType: AddressType
}

input UpdateAddressInput {
  locationId: String
  street: String
  addressType: AddressType
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
}

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input CreateUserAddressInput {
  createAddress: CreateAddressInput!
  isDefault: Boolean
}

input UpdateUserAddressInput {
  createAddress: CreateAddressInput
  isDefault: Boolean
}

input CreateCityInput {
  name: String!
  countryId: String!
  postalCode: String
  state: String
}

input CreateCountryInput {
  name: String!
}

input CreateCompanyDto {
  name: String!
  email: String!
  phone: String!
  website: String!
}

input UpdateCompanyDto {
  name: String
  email: String
  phone: String
  website: String
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  categoryId: String!
  details: [CreateDetailInput!]!
  images: [CreateImagDto!]!
}

input CreateDetailInput {
  colorId: String!
  quantity: Int!
  size: Size
  productId: String
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  categoryId: String
  details: [CreateDetailInput!]
  images: [CreateImagDto!]
  id: String!
}

input CreateColorInput {
  name: String!
}

input UpdateColorInput {
  id: String!
  name: String!
}

input UpdateProductDetailsInput {
  colorId: String
  quantity: Int
  size: Size
  productId: String
  id: String!
}

input CartItemInput {
  productId: String!
  detailsId: String!
  quantity: Float!
}

input CreateCouponInput {
  expiryDate: DateTime!
  name: String!
  categoryId: String!
  type: TypeCoupon!
  discount: Float!
}

input UpdateCouponInput {
  expiryDate: DateTime
  name: String
  categoryId: String
  type: TypeCoupon
  discount: Float
  id: String!
}

type Subscription {
  productCreated: ProductPubsupResponse!
  productDeleted: String!
}